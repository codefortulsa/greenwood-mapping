# Generated by Django 4.2.1 on 2023-05-28 01:48

from django.db import migrations, models
import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):

    dependencies = [
        ("entities", "0004_businessevent_personevent_and_more"),
    ]

    operations = [
        pgtrigger.migrations.RemoveTrigger(
            model_name="business",
            name="snapshot_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="business",
            name="snapshot_update",
        ),
        migrations.RemoveField(
            model_name="businessevent",
            name="canonical",
        ),
        migrations.RemoveField(
            model_name="businessevent",
            name="entity_ptr",
        ),
        migrations.RemoveField(
            model_name="businessevent",
            name="id",
        ),
        migrations.RemoveField(
            model_name="businessevent",
            name="meta",
        ),
        migrations.RemoveField(
            model_name="businessevent",
            name="name",
        ),
        migrations.RemoveField(
            model_name="businessevent",
            name="polymorphic_ctype",
        ),
        migrations.AddField(
            model_name="business",
            name="proprietor",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="entities.person",
            ),
        ),
        migrations.AddField(
            model_name="businessevent",
            name="proprietor",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="entities.person",
            ),
        ),
        migrations.AddField(
            model_name="entity",
            name="active",
            field=models.BooleanField(default=True),
        ),
        migrations.AlterField(
            model_name="businessevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="proprietor_event",
                to="entities.business",
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="business",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "entities_businessevent" ("pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "proprietor_id") VALUES (_pgh_attach_context(), NOW(), \'snapshot\', NEW."entity_ptr_id", NEW."proprietor_id"); RETURN NULL;',
                    hash="5e48c9f416bb2de44943b5c3fbf24438f5c54979",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_insert_2669a",
                    table="entities_business",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="business",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."proprietor_id" IS DISTINCT FROM (NEW."proprietor_id"))',
                    func='INSERT INTO "entities_businessevent" ("pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "proprietor_id") VALUES (_pgh_attach_context(), NOW(), \'snapshot\', NEW."entity_ptr_id", NEW."proprietor_id"); RETURN NULL;',
                    hash="15d1b2e1cffd0c5169f2c1531b9cda286dd92664",
                    operation="UPDATE",
                    pgid="pgtrigger_snapshot_update_88104",
                    table="entities_business",
                    when="AFTER",
                ),
            ),
        ),
    ]
